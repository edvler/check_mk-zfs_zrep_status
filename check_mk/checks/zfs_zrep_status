#!/usr/bin/python

# Author: Matthias Maderer
# E-Mail: edvler@edvler-blog.de
# URL: https://github.com/edvler/check_mk-zfs_zrep_status
# License: GPLv2

#Example output of agent with zrep version < 1.8.0
#
#root@pve01:/usr/lib/check_mk_agent/plugins# ./zfs_zrep_status
#<<<zfs_zrep_status>>>
#b01/offs                                       last synced 2019/12/25-19:32:03 zrep-c01


#Example output of agent with zrep version >= 1.8.0
#
#root@pve01:/usr/lib/check_mk_agent/plugins# ./zfs_zrep_status
#<<<zfs_zrep_status>>>
#backup02/offsite                                     last: 2019/12/24-14:54:54 zrep-b02-ext01


# default parameters
zfs_zrep_status_default_levels = {'check_backup': 'check', 'backup_age': (93600, 108000)}

# the inventory function (dummy)
def inventory_zfs_zrep_status(info):
    # loop over all output lines of the agent
    for line in info:
        if line[2] == 'synced':
            yield line[0] + ' Tag: ' + line[4], "zfs_zrep_status_default_levels"
        else:
            yield line[0] + ' Tag: ' + line[3], "zfs_zrep_status_default_levels"
        #yield line[0], "zfs_zrep_status_default_levels"

# the check function (dummy)
def check_zfs_zrep_status(item, params, info):

    warn, error = params['backup_age']
    perfdata = [
        ( "backup_age", 0, warn, error ),
    ]
    
    #return 0 if check of backups should not be done
    if params['check_backup'] == 'ignore':
        return (0, 'check disabled by rule', perfdata)

    for line in info:
        tag = ""
        if line[2] == 'synced':
            tag = line[4]
        else:
            tag = line[3]

        if line[0] + ' Tag: ' + tag == item:
            synctime = ""
            if line[2] == 'synced':
                synctime = time.strptime(line[3],"%Y/%m/%d-%H:%M:%S")
            else:
                synctime = time.strptime(line[2],"%Y/%m/%d-%H:%M:%S")

            old = time.time() - time.mktime(synctime)
            old_formatted = pretty_time_delta(old)

            infotext = 'last synchronized: ' + time.strftime("%Y-%m-%d %H:%M", synctime) + ' (' + old_formatted + ' ago)'

            perfdata = [
                ( "backup_age", old, warn, error ),
            ]

            if old >= warn:
                return (1, infotext, perfdata)
            if old >= error:
                return (2, infotext, perfdata)

            return (0, infotext, perfdata)

    return (3, 'zrep status returned no output for ' + item + '. Maybe the ZFS dataset was removed or zrep clear was called?', perfdata)



# declare the check to Check_MK
check_info["zfs_zrep_status"] = {
    'check_function':            check_zfs_zrep_status,
    'inventory_function':        inventory_zfs_zrep_status,
    'service_description':       'ZREP status %s',
    'group':                     'zfs',
    'has_perfdata':              True,
}

#thanks to https://gist.github.com/thatalextaylor/7408395
def pretty_time_delta(seconds):
    sign_string = '-' if seconds < 0 else ''
    seconds = abs(int(seconds))
    days, seconds = divmod(seconds, 86400)
    hours, seconds = divmod(seconds, 3600)
    minutes, seconds = divmod(seconds, 60)
    
    if days > 0:
        return '%s%dd %dh %dm' % (sign_string, days, hours, minutes)
    elif hours > 0:
        return '%s%dh %dm' % (sign_string, hours, minutes)
    elif minutes > 0:
        return '%s%dm' % (sign_string, minutes)
    else:
        return '0m'

